<!DOCTYPE HTML>
<html><head>

<meta http-equiv="Content-Type" content="text/html;charset=utf-8"><title>Sanskrit transliteration</title>
  
<style type="text/css">
div { width:49%; border: 0px solid green; }
div.devanagaridiv, div.htmldiv, div.iastdiv, div.IASTdiv, div.ipadiv { float:right; clear:right;}
div.harvardkyotodiv,div.itransdiv,div.velthuisdiv { float:left; clear:left;}
textarea {
    width: 90%;
 height: 6em;
}

div.formatlist {
    display: none;
}
</style></head><body>

<p>Note: Original version by <a href="http://shreevatsa.appspot.com/sanskrit/transliterate.html">Shreevatsa</a>. Collapsed into a single file by <a href="http://groups.google.com/group/samskrita/browse_thread/thread/1e71f4d79ecc1951">anunAd</a>.
</p>

  <div class="entryarea">
    If you enable Javascript, you can convert between the following transliteration schemes:
    <ul>
      <li title="devanagari">Devanagari</li>
      <li title="harvardkyoto"><a href="http://en.wikipedia.org/wiki/Devanagari_transliteration#Transliteration_Comparison">Harvard-Kyoto</a> (for <a href="http://www.sanskrit-lexicon.uni-koeln.de/monier/">Monier-Williams</a>, etc.)</li>
      <li title="itrans"><a href="http://en.wikipedia.org/wiki/Devanagari_transliteration#Transliteration_Comparison">ITRANS</a></li>

      <li title="iast"><a href="http://en.wikipedia.org/wiki/Devanagari_transliteration#Transliteration_Comparison">IAST</a>, lowercase</li>
      <li title="IAST">IAST, uppercase</li>
      <li title="velthuis"><a href="http://en.wikipedia.org/wiki/Devanagari_transliteration#Transliteration_Comparison">Velthuis</a> (for <a href="http://sanskrit.inria.fr/">INRIA</a>, etc.)</li>
      <li title="html">HTML numeric character references</li>

      <li title="ipa">IPA (approximate, incomplete, experimental!)</li>
    </ul>
  </div>

<script type="text/javascript" charset="UTF-8"> 


if (!this.JSON) {

// Create a JSON object only if one does not already exist. We create the
// object in a closure to avoid creating global variables.

    this.JSON = function () {

        function f(n) {
            // Format integers to have at least two digits.
            return n < 10 ? '0' + n : n;
        }

        Date.prototype.toJSON = function (key) {

            return this.getUTCFullYear()   + '-' +
                 f(this.getUTCMonth() + 1) + '-' +
                 f(this.getUTCDate())      + 'T' +
                 f(this.getUTCHours())     + ':' +
                 f(this.getUTCMinutes())   + ':' +
                 f(this.getUTCSeconds())   + 'Z';
        };

        var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            escapeable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
            gap,
            indent,
            meta = {    // table of character substitutions
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"' : '\\"',
                '\\': '\\\\'
            },
            rep;


        function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

            escapeable.lastIndex = 0;
            return escapeable.test(string) ?
                '"' + string.replace(escapeable, function (a) {
                    var c = meta[a];
                    if (typeof c === 'string') {
                        return c;
                    }
                    return '\\u' + ('0000' +
                            (+(a.charCodeAt(0))).toString(16)).slice(-4);
                }) + '"' :
                '"' + string + '"';
        }


        function str(key, holder) {

// Produce a string from holder[key].

            var i,          // The loop counter.
                k,          // The member key.
                v,          // The member value.
                length,
                mind = gap,
                partial,
                value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

            if (value && typeof value === 'object' &&
                    typeof value.toJSON === 'function') {
                value = value.toJSON(key);
            }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

            if (typeof rep === 'function') {
                value = rep.call(holder, key, value);
            }

// What happens next depends on the value's type.

            switch (typeof value) {
            case 'string':
                return quote(value);

            case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? String(value) : 'null';

            case 'boolean':
            case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

                return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

            case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

                if (!value) {
                    return 'null';
                }

// Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

// If the object has a dontEnum length property, we'll treat it as an array.

                if (typeof value.length === 'number' &&
                        !(value.propertyIsEnumerable('length'))) {

// The object is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                    length = value.length;
                    for (i = 0; i < length; i += 1) {
                        partial[i] = str(i, value) || 'null';
                    }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                    v = partial.length === 0 ? '[]' :
                        gap ? '[\n' + gap +
                                partial.join(',\n' + gap) + '\n' +
                                    mind + ']' :
                              '[' + partial.join(',') + ']';
                    gap = mind;
                    return v;
                }

// If the replacer is an array, use it to select the members to be stringified.

                if (rep && typeof rep === 'object') {
                    length = rep.length;
                    for (i = 0; i < length; i += 1) {
                        k = rep[i];
                        if (typeof k === 'string') {
                            v = str(k, value, rep);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                } else {

// Otherwise, iterate through all of the keys in the object.

                    for (k in value) {
                        if (Object.hasOwnProperty.call(value, k)) {
                            v = str(k, value, rep);
                            if (v) {
                                partial.push(quote(k) + (gap ? ': ' : ':') + v);
                            }
                        }
                    }
                }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

                v = partial.length === 0 ? '{}' :
                    gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' +
                            mind + '}' : '{' + partial.join(',') + '}';
                gap = mind;
                return v;
            }
        }

// Return the JSON object containing the stringify and parse methods.

        return {
            stringify: function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

                var i;
                gap = '';
                indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

                if (typeof space === 'number') {
                    for (i = 0; i < space; i += 1) {
                        indent += ' ';
                    }

// If the space parameter is a string, it will be used as the indent string.

                } else if (typeof space === 'string') {
                    indent = space;
                }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

                rep = replacer;
                if (replacer && typeof replacer !== 'function' &&
                        (typeof replacer !== 'object' ||
                         typeof replacer.length !== 'number')) {
                    throw new Error('JSON.stringify');
                }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

                return str('', {'': value});
            },


            parse: function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

                var j;

                function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                    var k, v, value = holder[key];
                    if (value && typeof value === 'object') {
                        for (k in value) {
                            if (Object.hasOwnProperty.call(value, k)) {
                                v = walk(value, k);
                                if (v !== undefined) {
                                    value[k] = v;
                                } else {
                                    delete value[k];
                                }
                            }
                        }
                    }
                    return reviver.call(holder, key, value);
                }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

                cx.lastIndex = 0;
                if (cx.test(text)) {
                    text = text.replace(cx, function (a) {
                        return '\\u' + ('0000' +
                                (+(a.charCodeAt(0))).toString(16)).slice(-4);
                    });
                }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

                if (/^[\],:{}\s]*$/.
test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@').
replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                    j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                    return typeof reviver === 'function' ?
                        walk({'': j}, '') : j;
                }

// If the text is not JSON parseable, then a SyntaxError is thrown.

                throw new SyntaxError('JSON.parse');
            }
        };
    }();
}


</script>
<script type="text/javascript" charset="UTF-8">
var virama = '्';
var implicita = 'अ';
var barematras = {
  'sk' : ['', 'ा', 'ि', 'ी', 'ु', 'ू',
          'ृ', 'ॄ', 'ॢ', 'ॣ',
          'े', 'ै',
          'ो', 'ौ']
};
var vowels = ['अ', 'आ', 'इ', 'ई', 'उ', 'ऊ',
              'ऋ', 'ॠ', 'ऌ', 'ॡ',
              'ए', 'ऐ', 'ओ', 'औ'];
var symbols = ['ं', 'ः', 'ऽ', '।', '॥',
               '०', '१', '२', '३', '४', '५', '६', '७', '८', '९'];
var noncons = vowels.length + symbols.length;

var consonants = ['क', 'ख', 'ग', 'घ', 'ङ',
                  'च', 'छ', 'ज', 'झ', 'ञ',
                  'ट', 'ठ', 'ड', 'ढ', 'ण',
                  'त', 'थ', 'द', 'ध', 'न',
                  'प', 'फ', 'ब', 'भ', 'म',
                  'य', 'र', 'ल', 'व',
                  'श', 'ष', 'स', 'ह'];

var alphabets = {

'sk': vowels.concat(symbols).concat(consonants),

'harvardkyoto':['a', 'A', 'i', 'I', 'u', 'U',
              'R', 'RR', 'lR', 'lRR',
              'e', 'ai', 'o', 'au',

              'M', 'H', '\'', '.', '..',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

              'k', 'kh', 'g', 'gh', 'G',
              'c', 'ch', 'j', 'jh', 'J',
              'T', 'Th', 'D', 'Dh', 'N',
              't', 'th', 'd', 'dh', 'n',
              'p', 'ph', 'b', 'bh', 'm',
              'y', 'r', 'l', 'v',
              'z', 'S', 's', 'h'],

'itrans':     ['a', ['aa','A'], 'i', ['ii','I'], 'u', ['uu','U'],
              ['RRi','R^i'], ['RRI','R^I'], ['LLi','L^i'], ['LLI','L^I'],
              'e', 'ai', 'o', 'au',

              'M', 'H', '\'', '|', '||',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

              'k', 'kh', 'g', 'gh', ['~N','N^'],
              'ch', 'Ch', 'j', 'jh', ['~n','JN'],
              'T', 'Th', 'D', 'Dh', 'N',
              't', 'th', 'd', 'dh', 'n',
              'p', 'ph', 'b', 'bh', 'm',
              'y', 'r', 'l', ['v','w'],
              'sh', 'Sh', 's', 'h'],

'velthuis':   ['a', 'aa', 'i', 'ii', 'u', 'uu',
              '.r', '.rr', '.l', '.ll',
              'e', 'ai', 'o', 'au',

               '.m', '.h', '\'', '|', '||',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

              'k', 'kh', 'g', 'gh', '"n',
              'c', 'ch', 'j', 'jh', '~n',
              '.t', '.th', '.d', '.dh', '.n',
              't', 'th', 'd', 'dh', 'n',
              'p', 'ph', 'b', 'bh', 'm',
              'y', 'r', 'l', 'v',
               '"s', '.s', 's', 'h'],

'iast':          ['a', 'ā', 'i', 'ī', 'u', 'ū',
                'ṛ', 'ṝ', 'ḷ', 'ḹ',
                'e', 'ai', 'o', 'au',

              'ṃ', 'ḥ', '\'', '|', '||',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

                'k', 'kh', 'g', 'gh', 'ṅ',
                'c', 'ch', 'j', 'jh', 'ñ',
                'ṭ', 'ṭh', 'ḍ', 'ḍh', 'ṇ',
                't', 'th', 'd', 'dh', 'n',
                'p', 'ph', 'b', 'bh', 'm',
                'y', 'r', 'l', 'v',
                'ś', 'ṣ', 's', 'h'],

'IAST':          ['A', 'Ā', 'I', 'Ī', 'U', 'Ū',
                'Ṛ', 'Ṝ', 'Ḷ', 'Ḹ',
                'E', 'Ai', 'O', 'Au',

                  'Ṃ', 'Ḥ', '\'', '|', '||',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

                'K', 'Kh', 'G', 'Gh', 'Ṅ',
                'C', 'Ch', 'J', 'Jh', 'Ñ',
                'Ṭ', 'Ṭh', 'Ḍ', 'Ḍh', 'Ṇ',
                'T', 'Th', 'D', 'Dh', 'N',
                'P', 'Ph', 'B', 'Bh', 'M',
                'Y', 'R', 'L', 'V',
                'Ś', 'Ṣ', 'S', 'H'],

// 'kannada':       ['ಅ', 'ಆ', 'ಇ', 'ಈ', 'ಉ', 'ಊ',
//                   'ಋ', 'ೠ', 'ಌ', 'ೡ',
//                   'ಏ', 'ಐ', 'ಓ', 'ಔ',
//                   'ಂ', 'ಃ',

//                   'ಕ', 'ಖ', 'ಗ', 'ಘ', 'ಙ',
//                   'ಚ', 'ಛ', 'ಜ', 'ಝ', 'ಞ',
//                   'ಟ', 'ಠ', 'ಡ', 'ಢ', 'ಣ',
//                   'ತ', 'ಥ', 'ದ', 'ಧ', 'ನ',
//                   'ಪ', 'ಫ', 'ಬ', 'ಭ', 'ಮ',
//                   'ಯ', 'ರ', 'ಲ', 'ವ',
//                   'ಶ', 'ಷ', 'ಸ', 'ಹ'],

'ipa':           ['ɐ', 'ɑː', 'i', 'iː', 'u', 'uː',
                  'ɻ', 'ɻː', 'ɭ', 'ɭː',
                  'eː', 'əi', 'oː', 'əu',

                  '[anusvara]', '[visarga]', '[elided a]', '', '',
              '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',

                  'k', 'kʰ', 'g', 'gʱ', 'ŋ',
                  //'c͡ç', 'c͡çʰ', 'ɟ͡ʝ', 'ɟ͡ʝʱ', 'ɲ',
                  'c', 'cʰ', 'ɟ', 'ɟʱ', 'ɲ',
                  'ʈ', 'ʈʰ', 'ɖ', 'ɖʱ', 'ɳ',
                  't̪', 't̪ʰ', 'd̪', 'd̪ʱ', 'n̪',
                  'p', 'pʰ', 'b', 'bʱ', 'm',

                  'j', 'r', 'l', 'ʋ',
                  'ɕ', 'ʂ', 's̪', 'ɦ']
};



</script>
<script type="text/javascript" charset="UTF-8">
/*
Not yet complete.

The base code for transliteration of Indian languages in general.

In principle something like this could work for any set of alphabets, but I'm not seeking such generality.
*/

if(!this.INtranslit) {
    //To avoid creating global variables put everything in a "closure", returning only things that need to be "global"
    this.INtranslit = function () {
        //For non-Firebug users, console.log should do nothing (not give an error)
        if(typeof(console) === "undefined" || typeof(console.log) === "undefined") var console = { log: function() { } };

        Array.prototype.contains = function(obj) {
          var i = this.length;
          while (i--) {
            if (this[i] === obj) {
              return true;
            }
          }
          return false;
        }

        // Make trie, given a table like {'a':'अ', 'A':'आ', 'ai':'ऐ', 'au':'औ' }
        function maketrie(table) {
            var root = {};
            for(var s in table) {
                //Go down the tree, following the letters of s
                var where = root;
                for(var i=0; i<s.length; ++i) {
                    if(where[s[i]] === undefined) where[s[i]] = {};
                    where = where[s[i]];
                }
                where.label = table[s];
            }
            return root;
        }

        //Convert a string using a labelled trie
        function convert(s, trie) {
            var out = '';
            //d = depth, a = parsed part, b = length of unparsed part
            var where = trie, d = 0, a = '', b = 0;
            var i = 0;
            while(i < s.length) {
                var c = s[i]; ++i;
                ++d;
                ++b;
                //If there is a child in the trie, just follow it
                if(where[c] !== undefined) { 
                    where = where[c];
                    if(where.label !== undefined) {
                        a = where.label; b = 0;
                    }
                }
                // else, go back to the root
                else {                  
                    //If nothing has been parsed, declare the first character as parsed 
                    if(b==d) {
                        a = s[i-b];
                        --b;
                    }
                    out += a;
                    //Go back to unparsed, and start over. (TODO: here a KMP table would help)
                    i -= b;
                    where = trie; d = 0; a = ''; b = 0;
                }
            }
            out += a+s.substr(i-b);
            return out;
        }

        //////////////////////////////////////////////////////////////////////
        //Make object like {'a':'अ', 'A':'आ', 'ai':'ऐ', 'au':'औ', 'k':'क्'}
        function to_sk(alphabet) {
            var ret = {};
            for(var i in alphabet) {
                var rhs = alphabets['sk'][i] + (i>=noncons ? virama : '');
                if(typeof(alphabet[i])=='string') ret[alphabet[i]] = rhs;
                else {
                    for(var c in alphabet[i]) ret[alphabet[i][c]] = rhs;
                }
            }
            return ret;
        }

        //Make object like {'अ':'a', 'आ':'A', 'ऐ':'ai', 'औ':'au' }
        function from_sk(alphabet) {
            var ret = {};
            for(var i in alphabet) {
                var lhs = alphabets['sk'][i] + (i>=noncons ? virama : '');
                if(typeof(alphabet[i])=='string') ret[lhs] = alphabet[i];
                else ret[lhs] = alphabet[i][0];
            }
            return ret;
        };


        //////////////////////////////////////////////////////////////////////

        var matras = { };
          for(var lang in barematras) {
            if(matras[lang] === undefined) matras[lang] = {};
            for(var i=0; i<barematras[lang].length; ++i) {
              matras[lang][alphabets[lang][i]] = barematras[lang][i];
            }
          }

        var unmatras = { };
        for(var lang in matras) {
            if(unmatras[lang] === undefined) unmatras[lang]={};
            for(var v in matras[lang]) {
                var m = matras[lang][v];
                if(m!=='') {
                    unmatras[lang][m] = v;
                }
            }
        }

        function fixmatras(s, lang) { //Replace क्इ            with                 कि
            var matra = matras[lang];
            for(var i in matra) {
                s = s.replace(RegExp(virama+i, "g"), matra[i]);
            }
            return s;
        }

        //////////////////////////////////////////////////////////////////////

        //Ok, explanation: "u" is my canonical Unicode form, in which "ka" and "ki" are both stored as KA+VIRAMA+VOWEL.
        //This is convenient as "k" is always KA+VIRAMA, etc.
        //fixmatras() shows Devanagari, by replacing each VIRAMA+VOWEL with the matra for that vowel.
        //unfixmatras() converts Devanagari to u, by replacing each MATRA with VIRAMA+VOWEL.

        //TODO: Make this exhaustive without hundreds of lines of code
        function insertbraces(s) {
          //Insert braces in ai, au, aii, kh, gh, etc.
          s = s.replace(RegExp('अइ', "g"), 'अ{}इ');
          s = s.replace(RegExp('अउ', "g"), 'अ{}उ');
          return s;
        }

        function removebraces(s) {
          return s.replace(RegExp("{}", "g"), "");
        }

        var vowel = { };
        for(var i=1; i<barematras['sk'].length; ++i) {
          vowel[barematras['sk'][i]] = vowels[i];
        }
        
        function unfixmatras(s) { //Replace कि            with                 क्इ
          //First, replace explicit matras with VIRAMA+VOWEL
          for(var i in vowel) {
            s = s.replace(RegExp(i, "g"), virama+vowel[i]);
          }
          //Next, replace implicit 'a' with VIRAMA+A
          var t = '';
          for(var i=0; i<s.length; ++i) {
            t += s[i];
            if(consonants.contains(s[i]) && s[i+1]!==virama) { //Even if it is undefined!
              t += virama + implicita;
            }
          }
          return t;
        }

        var ret = {
            devanagari2u: function(s)  {
                return insertbraces(unfixmatras(s, 'sk'));
            },
            u2devanagari: function(s) {
                return removebraces(fixmatras(s, 'sk'));
            },
            u2html: function(s) {
                s = this.u2devanagari(s);
                var t='';
                for(var i=0;i<s.length;++i) {
                    if(s.charCodeAt(i)>=128) t+='&#' + s.charCodeAt(i) + ';';
                    else t+=s[i];
                }
                return t;
            },
            html2u: function(s) {
                var t = '';
                for(var i=0;i<s.length;++i) {
                    if(s[i]=='&' && s[i+1]=='#') {
                        for(var j=i;s.charAt(j)!=';';++j)
                            ;
                        var n = s.substring(i+2,j) * 1;
                        t += String.fromCharCode(n);
                        i = j;
                    } else {
                        t += s[i];
                    }
                }
                return this.devanagari2u(t);
            }
        };

        for(var f in {itrans:'', harvardkyoto:'', velthuis:'', IAST:'', iast:'', ipa:''}) {
          var g = function () { //Need to do it inside a function, because of the broken "closure" model
            var t = maketrie(to_sk(alphabets[f]));
            var u = maketrie(from_sk(alphabets[f]));
            ret[f+"2u"] = function(s) { return convert(s, t); }
            ret["u2"+f] = function(s) { return convert(s, u); }
          }();
        }

        console.log('matras -- ');
        console.log(matras['sk']);
        console.log('unmatras-- ');
        console.log(unmatras['sk']);
        return ret;
    }();
}


</script>
<script>
var ta = [];
function makeentryarea() {
  var myolddiv = document.getElementsByClassName("entryarea")[0];
  var taposs = myolddiv.getElementsByTagName("ul")[0].getElementsByTagName("li");
  for(var i=0; i<taposs.length; ++i) {
    ta.push(taposs[i]);
  }

  /*This is part of the document; *really* ought to be done server-side*/
  while(myolddiv.hasChildNodes()) myolddiv.removeChild(myolddiv.firstChild);
  document.body.removeChild(myolddiv);
  document.open();
  for(var i=0; i<ta.length; ++i) {
    /*
    var mynewdiv = document.createElement('div'); mynewdiv.setAttribute('class', ta[i].getAttribute("title")+'div');
    var mytmppar = document.createElement('p'); mytmppar.appendChild(document.createTextNode(ta[i].innerHTML));
    mynewdiv.appendChild(mytmppar);
    var mytarea = document.createElement('textarea'); mytarea.setAttribute('id', ta[i].getAttribute("title"));
    mynewdiv.appendChild(mytarea);
    myolddiv.appendChild(mynewdiv);
    */

    var tareahtml = '<textarea spellcheck="false" id="' + ta[i].getAttribute("title") + '"';
    tareahtml +=  '></textarea>';
    document.writeln('<div class="'+ta[i].getAttribute("title")+'div"> <p>' + ta[i].innerHTML + '<br/>' + tareahtml + '</div>');
  }
  document.close();
}
makeentryarea();

/*
if (!String.prototype.endsWith) {
  String.prototype.endsWith = function(suffix) {
    var startPos = this.length - suffix.length;
    if (startPos < 0) {
      return false;
    }
    return (this.lastIndexOf(suffix, startPos) == startPos);
  };
}

//Reorder divs so that left/right works
var rightdivs = { devanagaridiv:'', htmldiv:'', IASTdiv:'', iastdiv:'' };
var leftdivs = { harvardkyotodiv:'', ITRANSdiv:'', velthuisdiv:''};
var alldivs = document.getElementsByTagName("div");
for(var i=0; i< alldivs.length; ++i) {
  if (alldivs[i].getAttribute("class").endsWith("div")) {
    alert("Found " + alldivs[i].getAttribute("class"));
  }
 }
*/
</script>

<script>
function fixall(tarea) {
	var u = INtranslit[tarea.id+"2u"](tarea.value);
  // u = "tryambaka #three eyed#";
	for(var i=0; i<ta.length; ++i) {
		var t = ta[i].getAttribute("title");
		var tokens = u.split("#");
		var strResult = "";
		for(var j=0;j<tokens.length; j++) {
			var token = tokens[j];
			strResult = strResult + "(" + token + ")";
			if(j%2===0) {
				strResult = strResult + INtranslit["u2"+t](u);
			}
			else {
				strResult = strResult + token;
			}
			if(j>1) {
				strResult = "#" + strResult;
			}
		}
		//document.writeln(tarea.value + "becomes " + u);
		if(t != tarea.id) {
			document.getElementById(t).value = strResult;
		}
		
	}
}

function prepareTareas() {
    var areas = document.getElementsByTagName('textarea');
    for(var i=0; i<areas.length; ++i) {
        areas[i].onkeyup=function() { return fixall(this); }
    }
}

function addLoadEvent(func) {
    var oldonload = window.onload;
    if (typeof window.onload != 'function') {
        window.onload = func;
    } else {
        window.onload = function() {
            if (oldonload) {
                oldonload();
            }
            func();
        }
    }
}

//addLoadEvent(makeentryarea);
addLoadEvent(prepareTareas);
</script>


</body></html>